What is a Plugin?
- Plugins are packages of code that extend the core functionality of WordPress.
  WordPress plugins are made up of PHP code and can include other assets
  such as images, CSS, and JavaScript.

Getting Started:
- At its simplest, a WordPress plugin is a PHP file with a WordPress plugin
  header comment. It’s highly recommended that you create a directory 
  to hold your plugin so that all of your plugin’s files are neatly 
  organized in one place.
----------------------------------------------------------------------------
Hooks: Actions and Filters: 
- WordPress hooks allow you to tap into WordPress at specific points 
  to change how WordPress behaves without editing any core files.
- There are two types of hooks within WordPress: actions and filters.
  Actions allow you to add or change WordPress functionality, while 
  filters allow you to alter content as it is loaded and displayed to the
  website user.

Basic Hooks: The 3 basic hooks you’ll need when creating a plugin are the
         
         1: register_activation_hook()
         2: register_deactivation_hook()
         3: register_uninstall_hook()

- The activation_hook is run when you activate your plugin. 
  You would use this to provide a function to set up your plugin —
  for example, creating some default settings in the options table.

- The deactivation_hook is run when you deactivate your plugin. 
  You would use this to provide a function that clears any temporary 
  data stored by your plugin.

- These uninstall_hook methods are used to clean up after your plugin is 
  deleted using the WordPress Admin. You would use this to delete all
  data created by your plugin, such as any options that were added to
  the options table.

Adding Hooks:
- You can add your own, custom hooks with do_action() , 
  which will enable developers to extend your plugin by passing
  functions through your hooks.

Removing Hooks:
- You can also use invoke remove_action() to remove a function 
  that was defined earlier. For example, if your plugin is an add-on
  to another plugin, you can use remove_action() with the same function 
  callback that was added by the previous plugin with add_action() .
  The priority of actions is important in these situations,
  as remove_action() would need to run after the initial add_action() .

- You should be careful when removing an action from a hook, as well as
  when altering priorities, because it can be difficult to see how these 
  changes will affect other interactions with the same hook. 
  We highly recommend testing frequently.

WordPress APIs:
- Did you know that WordPress provides a number of Application Programming
  Interfaces (APIs)? These APIs can greatly simplify the code you need to
  write in your plugins. You don’t want to reinvent the wheel, especially
  when so many people have done a lot of the work and testing for you.

- The most common one is the Options API, which makes it easy to store data
  in the database for your plugin. If you’re thinking of using cURL in your
  plugin, the HTTP API might be of interest to you.

Sharing your plugin: before sharing your plugin you should choose a license
=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==--

Header Requirements: 
As described in Getting Started, the main PHP file should include header 
comment what tells WordPress that a file is a plugin and provides information 
about the plugin.

-----------------------------------------------------------------------------
Header Fields: 
-Plugin Name: (required) The name of your plugin, which will be displayed in the Plugins
              list in the WordPress Admin.

-Plugin URI: The home page of the plugin, which should be a unique URL, 
             preferably on your own website. This must be unique to your plugin.
             You cannot use a WordPress.org URL here.

-Description: A short description of the plugin, as displayed in the Plugins section in 
              the WordPress Admin. Keep this description to fewer than 140 characters.

-Version: The current version number of the plugin, such as 1.0 or 1.0.3.

-Requires at least: The lowest WordPress version that the plugin will work on.

-Requires PHP: The minimum required PHP version.

-Author: The name of the plugin author. Multiple authors may be listed using commas.

-Author URI: The author’s website or profile on another website, such as WordPress.org.

-License: The short name (slug) of the plugin’s license (e.g. GPLv2). More information 
 about licensing can be found in the WordPress.org guidelines.

-License URI: A link to the full text of the license (e.g. https://www.gnu.org/licenses/gpl-2.0.html).

-Text Domain: The gettext text domain of the plugin. More information can be found in
 the Text Domain section of the How to Internationalize your Plugin page.

-Domain Path: The domain path lets WordPress know where to find the translations.
 More information can be found in the Domain Path section of the How to Internationalize
 your Plugin page.

-Network: Whether the plugin can only be activated network-wide. Can only be set to true,
 and should be left out when not needed.

-Update URI: Allows third-party plugins to avoid accidentally being overwritten with an
 update of a plugin of a similar name from the WordPress.org Plugin Directory. 
 For more info read related dev note.

-Requires Plugins: A comma-separated list of WordPress.org-formatted slugs for its 
 dependencies, such as my-plugin (my-plugin/my-plugin.php is not supported).
 It does not support commas in plugin slugs. For more info read the related dev note.
-----------------------------------------------------------------------------
Tips : When assigning a version number to your project, keep in mind that WordPress
       uses the PHP version_compare() function to compare plugin version numbers.
       Therefore, before you release a new version of your plugin, you should make sure 
       that this PHP function considers the new version to be “greater” than the old one.
       For example, 1.02 is actually greater than 1.1.
-----------------------------------------------------------------------------
Activation / Deactivation Hooks :
Activation and deactivation hooks provide ways to perform actions when plugins
 are activated or deactivated.

-On activation, plugins can run a routine to add rewrite rules, add custom database tables,
 or set default option values.
-On deactivation, plugins can run a routine to remove temporary data such as cache and 
 temp files and directories.
======================================================
Activation: 
To set up an activation hook, use the register_activation_hook() function:

                  register_activation_hook(
                     __FILE__,
                     'pluginprefix_function_to_run'
                  );
Deactivation:
To set up a deactivation hook, use the register_deactivation_hook() function:

                  register_deactivation_hook(
                     __FILE__,
                     'pluginprefix_function_to_run'
                  );
The first parameter in each of these functions refers to your main plugin file,
which is the file in which you have placed the plugin header comment.
Usually these two functions will be triggered from within the main plugin file; 
however, if the functions are placed in any other file, you must update the first
parameter to correctly point to the main plugin file.


/**
 * Register the "book" custom post type
 */
function pluginprefix_setup_post_type() {
	register_post_type( 'book', ['public' => true ] ); 
} 
add_action( 'init', 'pluginprefix_setup_post_type' );


/**
 * Activate the plugin.
 */
function pluginprefix_activate() { 
	// Trigger our function that registers the custom post type plugin.
	pluginprefix_setup_post_type(); 
	// Clear the permalinks after the post type has been registered.
	flush_rewrite_rules(); 
}
register_activation_hook( __FILE__, 'pluginprefix_activate' );

/**
 * Deactivation hook.
 */
function pluginprefix_deactivate() {
	// Unregister the post type, so the rules are no longer in memory.
	unregister_post_type( 'book' );
	// Clear the permalinks to remove our post type's rules from the database.
	flush_rewrite_rules();
}
register_deactivation_hook( __FILE__, 'pluginprefix_deactivate' );

---------------------------------------------------------------------------
Because you are making code as a part of the WordPress project, you must avoid the use
of prefixes that have a high probability of conflicting with the core WordPress. 
This includes but is not limited to: __ (double underscores), wp_ , WordPress, 
or _ (single underscore)

If you are making code for a ‘sub’ plugin (such as a WooCommece extension), 
you would similarly need to avoid using any of their normal/common prefixes
(i.e. Woo, WooCommerce).

You can use them inside your classes or namespace, but not as stand-alone
function/namespace/class.
---------------------------------------------------------------------------
Check for Existing Implementations::
PHP provides a number of functions to verify existence of variables, functions,
classes and constants. All of these will return true if the entity exists.

            Variables: isset() (includes arrays, objects, etc.)
            Functions: function_exists()
            Classes: class_exists()
            Constants: defined()

Tips: Keep in mind that using(!function_exists(‘NAME ‘))
{ around all your functions and classes sounds like a great idea 
until you realize the fatal flaw. If something else has a function
with the same name and their code loads first, your plugin will break.
Using if-exists to replace/override a function or class should be reserved
for shared libraries only.
---------------------------------------------------------------------------
Example: 

// Create a function called "wporg_init" if it doesn't already exist
         if ( ! function_exists( 'wporg_init' ) ) {
            function wporg_init() {
               register_setting( 'wporg_settings', 'wporg_option_foo' );
            }
         }

// Create a function called "wporg_get_foo" if it doesn't already exist
         if ( ! function_exists( 'wporg_get_foo' ) ) {
            function wporg_get_foo() {
               return get_option( 'wporg_option_foo' );
            }
         }
---------------------------------------------------------------------------
Plugin Architecture & Folder Structure:

A clear folder structure helps you and others working on your plugin keep similar files together.

/plugin-name
     plugin-name.php
     uninstall.php
     /languages
     /includes
     /admin
          /js
          /css
          /images
     /public
          /js
          /css
          /images

---------------------------------------------------------------------------
For small, single-purpose plugins that have limited interaction with WordPress core,
themes or other plugins, there’s little benefit in engineering complex classes; 
unless you know the plugin is going to expand greatly later on.

For large plugins with lots of code, start off with classes in mind.
Separate style and scripts files, and even build-related files. 
This will help code organization and long-term maintenance of the plugin.
---------------------------------------------------------------------------
Conditional Loading:
t’s helpful to separate your admin code from the public code. 
Use the conditional is_admin(). You must still perform capability
checks as this doesn’t indicate the user is authenticated or has
Administrator-level access. See Checking User Capabilities.

            if ( is_admin() ) {
               // we are in admin mode
               require_once __DIR__ . '/admin/plugin-name-admin.php';
            }
---------------------------------------------------------------------------
Avoiding Direct File Access::

As a security precaution, it’s a good practice to disallow access 
if the ABSPATH global is not defined. This is only applicable to
files which contain code outside of class or function definitions,
such as the main plugin file.

You can implement this by including this code at the top of the file:

         if ( ! defined( 'ABSPATH' ) ) {
            exit; // Exit if accessed directly
         }

---------------------------------------------------------------------------
Determining Plugin and Content Directories::

When coding WordPress plugins you often need to reference various files and 
folders throughout the WordPress installation and within your plugin or theme.

WordPress provides several functions for easily determining where a given file 
or directory lives. Always use these functions in your plugins instead of hard-coding
references to the wp-content directory or using the WordPress internal constants.

WordPress allows users to place their wp-content directory anywhere they want and 
rename it whatever they want. Never assume that plugins will be in wp-content/plugins,
uploads will be in wp-content/uploads, or that themes will be in wp-content/themes.

PHP’s __FILE__ magic-constant resolves symlinks automatically,
so if the wp-content or wp-content/plugins or even the individual
plugin directory is symlinked, hardcoded paths will not work correctly.
---------------------------------------------------------------------------
Common Usage::

If your plugin includes JavaScript files, CSS files or other external files, 
then it’s likely you’ll need the URL to these files so you can load them into the page.
To do this you should use the plugins_url() function like so:

         plugins_url( 'myscript.js', __FILE__ );

This will return the full URL to myscript.js, such as
    example.com/wp-content/plugins/myplugin/myscript.js.

To load your plugins’ JavaScript or CSS into the page you should use wp_enqueue_script()
or wp_enqueue_style() respectively, passing the result of plugins_url() as the file URL.    
--------------------------------------------------------------------------- 
Available Functions:
WordPress includes many other functions for determining paths and URLs to files
or directories within plugins, themes, and WordPress itself. See the individual
DevHub pages for each function for complete information on their use.

Plugins::
              plugins_url()
              plugin_dir_url()
              plugin_dir_path()
              plugin_basename()

Themes::  
              get_template_directory_uri()
              get_stylesheet_directory_uri()
              get_stylesheet_uri()
              get_theme_root_uri()
              get_theme_root()
              get_theme_roots()
              get_stylesheet_directory()
              get_template_directory()         

Site Home::
              home_url()
              get_home_path()

WordPress::
              admin_url()
              site_url()
              content_url()
              includes_url()
              wp_upload_dir()

Multisite::
              get_admin_url()
              get_home_url()
              get_site_url()
              network_admin_url()
              network_site_url()
              network_home_url()
---------------------------------------------------------------------------
Constants:
WordPress makes use of the following constants when determining the path to
the content and plugin directories. These should not be used directly by 
plugins or themes, but are listed here for completeness.

          WP_CONTENT_DIR  // no trailing slash, full paths only
          WP_CONTENT_URL  // full url 
          WP_PLUGIN_DIR  // full path, no trailing slash
          WP_PLUGIN_URL  // full url, no trailing slash

          // Available per default in MS, not set in single site install
          // Can be used in single site installs (as usual: at your own risk)
          UPLOADS // (If set, uploads folder, relative to ABSPATH) (for e.g.: /wp-content/uploads)

---------------------------------------------------------------------------
Uninstall Methods:::

Your plugin may need to do some clean-up when it is uninstalled from a site.

A plugin is considered uninstalled if a user has deactivated the plugin,
and then clicks the delete link within the WordPress Admin.

Method 1: register_uninstall_hook:

          register_uninstall_hook(
              __FILE__,
            'pluginprefix_function_to_run'
          );

Method 2: uninstall.php:
To use this method you need to create an uninstall.php file inside the
root folder of your plugin. This magic file is run automatically when the
users deletes the plugin.

Tips: 
Always check for the constant WP_UNINSTALL_PLUGIN in uninstall.php before doing anything.
This protects against direct access.
The constant will be defined by WordPress during the uninstall.php invocation.

The constant is NOT defined when uninstall is performed by register_uninstall_hook() .

                    // if uninstall.php is not called by WordPress, die
                    if ( ! defined( 'WP_UNINSTALL_PLUGIN' ) ) {
                        die;
                    }

                    $option_name = 'wporg_option';

                    delete_option( $option_name );

                    // for site options in Multisite
                    delete_site_option( $option_name );

                    // drop a custom database table
                    global $wpdb;
                    $wpdb->query( "DROP TABLE IF EXISTS {$wpdb->prefix}mytable" );
---------------------------------------------------------------------------------------------
https://developer.wordpress.org/plugins/security/  👈👈👈👈 i study until here
